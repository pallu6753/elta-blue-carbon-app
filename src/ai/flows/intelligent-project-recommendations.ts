'use server';

/**
 * @fileOverview An AI agent that provides project recommendations based on investor goals.
 *
 * - getProjectRecommendations - A function that returns project recommendations.
 * - ProjectRecommendationsInput - The input type for the getProjectRecommendations function.
 * - ProjectRecommendationsOutput - The return type for the getProjectRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ProjectRecommendationsInputSchema = z.object({
  investmentGoals: z
    .string()
    .describe('The investment goals of the investor.'),
  riskTolerance: z
    .string()
    .describe('The risk tolerance of the investor (e.g., low, medium, high).'),
  preferredProjectType: z
    .string()
    .optional()
    .describe('Optional: The preferred type of project (e.g., Mangrove, Seagrass).'),
  investmentSize: z
    .number()
    .optional()
    .describe('Optional: The size of the investment.'),
});

export type ProjectRecommendationsInput = z.infer<
  typeof ProjectRecommendationsInputSchema
>;

const ProjectRecommendationsOutputSchema = z.object({
  recommendations: z.array(
    z.object({
      projectName: z.string().describe('The name of the recommended project.'),
      projectType: z.string().describe('The type of the recommended project.'),
      carbonCreditEstimate: z
        .string()
        .describe('The estimated carbon credits generated by the project.'),
      location: z.string().describe('The location of the project.'),
      riskAssessment: z.string().describe('A brief risk assessment of the project.'),
      expectedReturn: z.string().describe('The expected return on investment.'),
      environmentalImpact: z
        .string()
        .describe('Summary of the environmental impact of the project.'),
    })
  ).describe('A list of project recommendations.'),
});

export type ProjectRecommendationsOutput = z.infer<
  typeof ProjectRecommendationsOutputSchema
>;

export async function getProjectRecommendations(
  input: ProjectRecommendationsInput
): Promise<ProjectRecommendationsOutput> {
  return intelligentProjectRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'intelligentProjectRecommendationsPrompt',
  input: {schema: ProjectRecommendationsInputSchema},
  output: {schema: ProjectRecommendationsOutputSchema},
  prompt: `You are an AI assistant that provides carbon credit project recommendations to investors based on their investment goals, risk tolerance, preferred project type and investment size.

  Provide a list of project recommendations including the project name, project type, carbon credit estimate, location, risk assessment and expected return. Please tailor the recommendations to the investor's specific criteria and preferences. Briefly summarise the environmental impact of each project.

  Investment Goals: {{{investmentGoals}}}
  Risk Tolerance: {{{riskTolerance}}}
  Preferred Project Type: {{{preferredProjectType}}}
  Investment Size: {{{investmentSize}}}
  `,
});

const intelligentProjectRecommendationsFlow = ai.defineFlow(
  {
    name: 'intelligentProjectRecommendationsFlow',
    inputSchema: ProjectRecommendationsInputSchema,
    outputSchema: ProjectRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
