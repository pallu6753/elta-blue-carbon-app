/**
 * @fileoverview Firestore Security Rules for the EltaBlue platform.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model:
 * 1.  Strict user-ownership for personal data and resources.
 * 2.  Role-based access for administrative functions.
 * 3.  Owner-based access for resources with an `ownerId` field.
 * 4.  Unauthenticated write access for the /contacts collection, with appropriate monitoring in place.
 *
 * Data Structure:
 * - /users/{userId}/user_profile: User profile information, accessible only to the user.
 * - /projects/{projectId}: Project data, accessible based on developerId.
 * - /projects/{projectId}/mrv_reports/{mrvReportId}: MRV reports associated with projects.
 * - /carbon_credits/{carbonCreditId}: Carbon credit data, accessible based on ownerId.
 * - /roles_admin/{userId}: Admin role assignments. Existence implies admin access.
 * - /contacts/{contactId}: Contact form submissions.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed unless explicitly required and secured.
 * - Read-only collections (if any) are explicitly marked with `allow get, list: if true;`.
 * - The default security posture is strict: if a relationship is ambiguous, access is denied.
 * - Contacts collection will be set as open for unauthenticated access, so monitoring will be very important.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}/user_profile
     * @allow (get, list, create, update, delete) if isSignedIn() && isOwner(userId)
     * @deny (get, list, create, update, delete) if !isSignedIn() || !isOwner(userId)
     * @principle Enforces strict document ownership.
     */
    match /users/{userId}/user_profile {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to project data based on the `developerId` field.
     * @path /projects/{projectId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn() && request.resource.data.developerId == request.auth.uid
     * @allow (update, delete) if isSignedIn() && resource.data.developerId == request.auth.uid && resource != null
     * @deny (create, update, delete) if !isSignedIn() || request.resource.data.developerId != request.auth.uid
     * @principle Enforces document ownership for writes.
     */
    match /projects/{projectId} {
      function isProjectDeveloper(developerId) {
        return request.auth.uid == developerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.developerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.developerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.developerId == request.auth.uid;
    }

    /**
     * @description Controls access to MRV reports based on project developer.
     * @path /projects/{projectId}/mrv_reports/{mrvReportId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.developerId == request.auth.uid && resource != null
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces authorization based on project ownership.
     */
    match /projects/{projectId}/mrv_reports/{mrvReportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function getProjectDeveloperId(projectId) {
        return get(/databases/$(database)/documents/projects/$(projectId)).data.developerId;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.developerId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.developerId == request.auth.uid;
    }

    /**
     * @description Controls access to carbon credits based on the `ownerId` field.
     * @path /carbon_credits/{carbonCreditId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn() && request.resource.data.ownerId == request.auth.uid
     * @allow (update, delete) if isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null
     * @deny (create, update, delete) if !isSignedIn() || request.resource.data.ownerId != request.auth.uid
     * @principle Enforces document ownership for writes.
     */
    match /carbon_credits/{carbonCreditId} {
      function isCreditOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Grants admin access based on the existence of a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (get, list) if false
     * @allow (create) if isSignedIn() && isOwner(userId)
     * @allow (update, delete) if isSignedIn() && isOwner(userId) && resource != null
     * @deny (create, update, delete) if !isSignedIn() || !isOwner(userId)
     * @principle Role-based access control.
     */
    match /roles_admin/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if isAdmin();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

        /**
     * @description Allows anyone to create a contact form submission.
     * @path /contacts/{contactId}
     * @allow get, list: if true;
     * @allow create: if true;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Allows unauthenticated write access for contact submissions.
     */
    match /contacts/{contactId} {
       allow get: if true;
       allow list: if true;
       allow create: if true;
       allow update: if false;
       allow delete: if false;
    }
  }
}