/**
 * @file Firestore Security Rules for EltaBlue Platform
 * @description This ruleset enforces a strict user-ownership model for user profiles and uses denormalized fields for managing access to projects, MRV reports, and carbon credits. It also includes support for global admin roles.
 *
 * Data Structure:
 * - /users/{userId}/user_profile: User profile information, accessible only to the user.
 * - /projects/{projectId}: Blue carbon project data, accessible to the project developer.
 * - /projects/{projectId}/mrv_reports/{mrvReportId}: MRV reports for projects, accessible to project members and verifiers.
 * - /carbon_credits/{carbonCreditId}: Carbon credit data, accessible to the credit owner.
 * - /roles_admin/{userId}: Collection to store admin roles. Existence of a document grants admin access.
 * - /contacts/{contactId}: Stores contact form submissions.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the owning user.
 * - Project access is controlled through the `developerId` field in the project document.
 * - MRV report access is based on project membership (denormalized).
 * - Carbon credit access is controlled through the `ownerId` field.
 * - Admin roles are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 * - Listing of user profiles is disallowed.
 * - Contacts are available for read and write by any user.
 *
 * Denormalization for Authorization:
 * - MRV reports include a `projectId` field to allow security rules to be applied independently of the parent project.
 * - Project documents should contain a `members` map (e.g., `{ members: { 'user_abc': 'editor' } }`) to control access to the project and its subcollections.
 *
 * Structural Segregation:
 * - User profile data is stored in a private subcollection under `/users/{userId}` to ensure it is not mixed with public project data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}/user_profile
     * @allow (create) User with UID 'user123' creates their profile at /users/user123/user_profile
     * @deny (create) User with UID 'user123' tries to create a profile at /users/user456/user_profile
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/user_profile {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(resource);
      }

      // Allow the user to read their own profile
      allow get: if isSignedIn() && isOwner(userId);
      // Disallow listing user profiles
      allow list: if false;

      // Allow the user to create their own profile if the userId matches
      allow create: if isSignedIn() && isOwner(userId);
      // Allow the user to update their own profile if the userId matches
      allow update: if isSignedIn() && isOwner(userId);
      // Allow the user to delete their own profile if the userId matches
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to project data.  The project `developerId` must match the authenticated user's UID for write access. Read access is public.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can read the list of projects or get an individual project.
     * @allow (create) User with UID 'user123' creates a project with developerId: 'user123'.
     * @deny (create) User with UID 'user123' tries to create a project with developerId: 'user456'.
     * @deny (update, delete) User with UID 'user456' tries to update/delete a project where resource.data.developerId == 'user123'.
     * @principle Enforces document ownership for writes; allows public read access.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(developerId) {
        return isSignedIn() && request.auth.uid == developerId;
      }

      function isExistingOwner() {
          return isSignedIn() && request.auth.uid == resource.data.developerId;
      }

      // Allow public read access
      allow get, list: if true;

      // Allow creation if the developerId matches the authenticated user's UID
      allow create: if isSignedIn() && request.resource.data.developerId == request.auth.uid;

      // Allow updates and deletes if the user is the owner and the document exists
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to MRV reports.  The project `developerId` of the parent project must match the authenticated user's UID for write access. Read access is public.
     * @path /projects/{projectId}/mrv_reports/{mrvReportId}
     * @allow (get, list) Any user can read the list of MRV reports or get an individual report.
     * @allow (create) User with UID 'user123' creates an MRV report under a project where the project's developerId is 'user123'.
     * @deny (create) User with UID 'user123' tries to create an MRV report under a project where the project's developerId is 'user456'.
     * @deny (update, delete) User with UID 'user456' tries to update/delete an MRV report under a project where the project's developerId is 'user123'.
     * @principle Enforces document ownership for writes; allows public read access.
     */
    match /projects/{projectId}/mrv_reports/{mrvReportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isProjectDeveloper(projectId) {
        return isSignedIn() && get(/databases/$(database)/documents/projects/$(projectId)).data.developerId == request.auth.uid;
      }

      function isExistingProjectDeveloper(projectId) {
        return isProjectDeveloper(projectId);
      }

      // Allow public read access
      allow get, list: if true;

      // Allow creation if the developerId of the project matches the authenticated user's UID
      allow create: if isSignedIn() && isProjectDeveloper(projectId);

      // Allow updates and deletes if the user is the project developer and the document exists
      allow update: if isSignedIn() && isProjectDeveloper(projectId);
      allow delete: if isSignedIn() && isProjectDeveloper(projectId);
    }

    /**
     * @description Controls access to carbon credit data. Only the owner of the carbon credit can read and write it.
     * @path /carbon_credits/{carbonCreditId}
     * @allow (create) User with UID 'user123' creates a carbon credit with ownerId: 'user123'.
     * @deny (create) User with UID 'user123' tries to create a carbon credit with ownerId: 'user456'.
     * @deny (update, delete) User with UID 'user456' tries to update/delete a carbon credit where resource.data.ownerId == 'user123'.
     * @principle Enforces document ownership for writes; allows public read access.
     */
    match /carbon_credits/{carbonCreditId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId;
      }

      function isExistingOwner() {
        return isSignedIn() && request.auth.uid == resource.data.ownerId;
      }

      // Allow public read access
      allow get, list: if true;

      // Allow creation if the ownerId matches the authenticated user's UID
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;

      // Allow updates and deletes if the user is the owner and the document exists
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }
        /**
         * @description Controls access to admin roles. Only admins can grant admin roles, but for now, any signed-in user can create a role
         * @path /roles_admin/{userId}
         * @allow (create) User with UID 'user123' creates an admin role document.
         * @deny (update, delete) User with UID 'user123' tries to update/delete an admin role document for 'user456'.
         * @principle Restricts modification of admin roles to admins.
         */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

       // Allow any signed-in user to create an admin role document for themselves (for prototyping purposes)
       allow create: if isSignedIn() && request.auth.uid == userId;
       allow get: if isSignedIn() && request.auth.uid == userId;
       allow list: if false;

       // Restrict updates and deletes to admins (not implemented in this prototype)
       allow update, delete: if false;
    }
    /**
     * @description Controls access to contact form submissions.
     * @path /contacts/{contactId}
     * @allow (get, list, create, update, delete) Any user can read, create, update, and delete contact form submissions.
     * @principle Allows public read and write access for contact form submissions.
     */
    match /contacts/{contactId} {
        allow get, list, create, update, delete: if true;
    }
  }
}