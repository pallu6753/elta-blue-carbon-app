/**
 * @file Firebase Security Rules for EltaBlue Platform
 *
 * @core_philosophy This ruleset enforces a combination of user-ownership, role-based access, and resource-based access control for the EltaBlue platform. It prioritizes security by default, explicitly denying access unless specifically granted.  Data shape validation is relaxed for rapid prototyping.
 *
 * @data_structure
 * - `/users/{userId}/user_profile`:  User profile data, owned exclusively by the user.
 * - `/projects/{projectId}`: Blue carbon project data, controlled by the project `developerId` and potentially a `members` map.
 * - `/projects/{projectId}/mrv_reports/{mrvReportId}`: MRV reports associated with a project. Access is determined by the project's `developerId`.
 * - `/carbon_credits/{carbonCreditId}`: Carbon credit data, owned by a user (`ownerId`).
 * - `/roles_admin/{userId}`: Admin role assignments. The existence of a document grants admin privileges.
 * - `/contacts/{contactId}`: Stores contact form submissions.
 *
 * @key_security_decisions
 * - Strict user ownership for profile data.
 * - Project access controlled by `developerId` on the project document and potentially a `members` map for shared access.
 * - Read access to user profiles and other user-owned data is restricted to the owning user.
 * - No public listing of user-owned data.
 * - Admin privileges granted based on the existence of a document in `/roles_admin/{userId}`.
 * - MRV reports are secured based on the parent Project's `developerId`.
 *
 * @denormalization_for_authorization To avoid costly `get()` calls, authorization data (e.g., user roles, project membership) is denormalized directly onto the documents being secured. For example, MRV reports include a `projectId` field to allow security rules to validate the parent project.
 *
 * @structural_segregation Private user data is stored in user-specific subcollections (e.g., `/users/{userId}/user_profile`), while public or shared data is stored in top-level collections (e.g., `/projects/{projectId}`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data. Only the authenticated user can read, update, or delete their own profile.
     * @path /users/{userId}/user_profile
     * @allow (create) - Authenticated user with matching `userId` creates their profile.
     *   - `auth.uid`: "user123"
     *   - `request.resource.data.userId`: "user123"
     * @allow (get, update, delete) - Authenticated user with matching `userId` reads, updates, or deletes their profile.
     *   - `auth.uid`: "user123"
     *   - `resource.data.userId`: "user123"
     * @deny (create) - Authenticated user attempts to create a profile for a different `userId`.
     *   - `auth.uid`: "user123"
     *   - `request.resource.data.userId`: "user456"
     * @deny (get, update, delete) - Authenticated user attempts to read, update, or delete a profile for a different `userId`.
     *   - `auth.uid`: "user123"
     *   - `resource.data.userId`: "user456"
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, and validates relational integrity between documents.
     */
    match /users/{userId}/user_profile {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Manages project data. Only the project developer (identified by `developerId`) can create, update, or delete projects. Anyone can read project data.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read or list projects.
     * @allow (create) - Authenticated user creates a project with their `auth.uid` as the `developerId`.
     *   - `auth.uid`: "user123"
     *   - `request.resource.data.developerId`: "user123"
     * @allow (update, delete) - Authenticated user with matching `developerId` updates or deletes the project.
     *   - `auth.uid`: "user123"
     *   - `resource.data.developerId`: "user123"
     * @deny (create) - Authenticated user attempts to create a project with a different `developerId`.
     *   - `auth.uid`: "user123"
     *   - `request.resource.data.developerId`: "user456"
     * @deny (update, delete) - Authenticated user attempts to update or delete a project with a different `developerId`.
     *   - `auth.uid`: "user123"
     *   - `resource.data.developerId`: "user456"
     * @principle Enforces document ownership for writes and allows public read access.
     */
    match /projects/{projectId} {
      function isOwner(developerId) {
        return request.auth != null && request.auth.uid == developerId;
      }
      function isExistingOwner(developerId) {
          return isOwner(developerId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isOwner(request.resource.data.developerId);
      allow update: if isExistingOwner(resource.data.developerId);
      allow delete: if isExistingOwner(resource.data.developerId);
    }

    /**
     * @description Manages MRV reports for a specific project. Only the project developer can create, update, or delete MRV reports. Anyone can read MRV reports.
     * @path /projects/{projectId}/mrv_reports/{mrvReportId}
     * @allow (get, list) - Any user can read or list MRV reports for a project.
     * @allow (create) - Authenticated user creates an MRV report for a project where they are the developer.
     *   - `auth.uid`: "user123"
     *   - `get(/databases/$(database)/documents/projects/$(projectId)).data.developerId`: "user123"
     * @allow (update, delete) - Authenticated user with matching `developerId` updates or deletes the MRV report.
     *   - `auth.uid`: "user123"
     *   - `get(/databases/$(database)/documents/projects/$(projectId)).data.developerId`: "user123"
     * @deny (create) - Authenticated user attempts to create an MRV report for a project where they are not the developer.
     *   - `auth.uid`: "user123"
     *   - `get(/databases/$(database)/documents/projects/$(projectId)).data.developerId`: "user456"
     * @deny (update, delete) - Authenticated user attempts to update or delete an MRV report for a project where they are not the developer.
     *   - `auth.uid`: "user123"
     *   - `get(/databases/$(database)/documents/projects/$(projectId)).data.developerId`: "user456"
     * @principle Enforces project developer ownership for writes on MRV reports and allows public read access.
     */
    match /projects/{projectId}/mrv_reports/{mrvReportId} {
      function isProjectDeveloper(projectId) {
        return request.auth != null && request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.developerId;
      }
      allow get, list: if true;
      allow create: if isProjectDeveloper(projectId);
      allow update: if isProjectDeveloper(projectId) && resource != null;
      allow delete: if isProjectDeveloper(projectId) && resource != null;
    }

    /**
     * @description Manages carbon credit data. Only the carbon credit owner (identified by `ownerId`) can update or delete the credit. Anyone can read carbon credit data.
     * @path /carbon_credits/{carbonCreditId}
     * @allow (get, list) - Any user can read or list carbon credits.
     * @allow (create) - Authenticated user creates a carbon credit with their `auth.uid` as the `ownerId`.
     *   - `auth.uid`: "user123"
     *   - `request.resource.data.ownerId`: "user123"
     * @allow (update, delete) - Authenticated user with matching `ownerId` updates or deletes the carbon credit.
     *   - `auth.uid`: "user123"
     *   - `resource.data.ownerId`: "user123"
     * @deny (create) - Authenticated user attempts to create a carbon credit with a different `ownerId`.
     *   - `auth.uid`: "user123"
     *   - `request.resource.data.ownerId`: "user456"
     * @deny (update, delete) - Authenticated user attempts to update or delete a carbon credit with a different `ownerId`.
     *   - `auth.uid`: "user123"
     *   - `resource.data.ownerId`: "user456"
     * @principle Enforces document ownership for writes and allows public read access.
     */
    match /carbon_credits/{carbonCreditId} {
      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }
      function isExistingOwner(ownerId) {
          return isOwner(ownerId) && resource != null;
      }
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

     /**
      * @description Manages admin role assignments. The existence of a document in this collection grants admin privileges to the associated user.
      * @path /roles_admin/{userId}
      * @allow (get) - Authenticated user can check their own admin status.
      *   - `auth.uid`: "admin123"
      * @allow (create) - Only an existing admin can assign admin roles.
      *   - `auth.uid`: "existingAdmin"
      * @allow (delete) - Only an existing admin can revoke admin roles.
      *   - `auth.uid`: "existingAdmin"
      * @deny (create, delete) - Non-admin users cannot assign or revoke admin roles.
      *   - `auth.uid`: "user123"
      * @deny (get) - Non-authenticated users cannot check admin status.
      *   - `auth.uid`: null
      * @principle Role-based access control based on document existence.
      */
     match /roles_admin/{userId} {
      function isSignedIn() {
          return request.auth != null;
      }

      function isAdmin() {
          return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Manages contact form submissions. Anyone can create a contact submission.
     * @path /contacts/{contactId}
     * @allow (get, list) - Any user can read or list contact submissions.
     * @allow (create) - Any authenticated or non-authenticated user can submit a contact form.
     * @deny (update, delete) - No user can update or delete contact submissions.
     * @principle Allows public submissions with restricted modification rights.
     */
    match /contacts/{contactId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}