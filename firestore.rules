/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and a public-read, owner-write model for projects, MRV reports, carbon credits and contacts.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the owning user.
 * - /projects/{projectId}: Stores project information, publicly readable but writable only by the project developer.
 * - /projects/{projectId}/mrv_reports/{mrvReportId}: Stores MRV reports for projects, publicly readable but writable only by the verifier.
 * - /carbon_credits/{carbonCreditId}: Stores carbon credit information, publicly readable but writable only by the owner.
 * - /contacts/{contactId}: Stores contact form submissions, publicly readable but writable only by anyone.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Projects, MRV reports, carbon credits and contacts are publicly readable.
 * - The rules do not validate the data model.
 * - Denormalization for Authorization: The `developerId`, `verifierId` and `ownerId` fields are used for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (get, list, create, update, delete) if the user is the owner of the profile.
     *  Example: A user with UID "user123" can read/write the document at /users/user123.
     * @deny (get, list, create, update, delete) if the user is not the owner of the profile.
     *  Example: A user with UID "user456" cannot read/write the document at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Protects project documents, allowing public read access and owner-only write access.
     * @path /projects/{projectId}
     * @allow (get, list) to anyone.
     *  Example: Any user can read the document at /projects/project123.
     * @allow (create, update, delete) only to the project developer.
     *  Example: A user with UID "user123" can create/update/delete the document at /projects/project123 if resource.data.developerId == "user123".
     * @deny (create, update, delete) if the user is not the project developer.
     *  Example: A user with UID "user456" cannot create/update/delete the document at /projects/project123, even if they are authenticated.
     * @principle Enforces public read access with owner-only write access, validates developerId on creation.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == request.resource.data.developerId;
      allow update: if request.auth.uid == resource.data.developerId;
      allow delete: if request.auth.uid == resource.data.developerId;
    }

    /**
     * @description Protects MRV reports, allowing public read access and owner-only write access.
     * @path /projects/{projectId}/mrv_reports/{mrvReportId}
     * @allow (get, list) to anyone.
     *  Example: Any user can read the document at /projects/project123/mrv_reports/report456.
     * @allow (create, update, delete) only to the report verifier.
     *  Example: A user with UID "user123" can create/update/delete the document at /projects/project123/mrv_reports/report456 if resource.data.verifierId == "user123".
     * @deny (create, update, delete) if the user is not the report verifier.
     *  Example: A user with UID "user456" cannot create/update/delete the document at /projects/project123/mrv_reports/report456, even if they are authenticated.
     * @principle Enforces public read access with owner-only write access, validates verifierId on creation.
     */
    match /projects/{projectId}/mrv_reports/{mrvReportId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == request.resource.data.verifierId;
      allow update: if request.auth.uid == resource.data.verifierId;
      allow delete: if request.auth.uid == resource.data.verifierId;
    }

    /**
     * @description Protects carbon credit documents, allowing public read access and owner-only write access.
     * @path /carbon_credits/{carbonCreditId}
     * @allow (get, list) to anyone.
     *  Example: Any user can read the document at /carbon_credits/credit123.
     * @allow (create, update, delete) only to the carbon credit owner.
     *  Example: A user with UID "user123" can create/update/delete the document at /carbon_credits/credit123 if resource.data.ownerId == "user123".
     * @deny (create, update, delete) if the user is not the carbon credit owner.
     *  Example: A user with UID "user456" cannot create/update/delete the document at /carbon_credits/credit123, even if they are authenticated.
     */
    match /carbon_credits/{carbonCreditId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth.uid == resource.data.ownerId;
      allow delete: if request.auth.uid == resource.data.ownerId;
    }

    /**
     * @description Protects contact form submissions, allowing public read access and write access.
     * @path /contacts/{contactId}
     * @allow (get, list, create, update, delete) to anyone.
     *  Example: Any user can read the document at /contacts/contact123.
     * @principle Enforces public read and write access, no ownership validation.
     */
    match /contacts/{contactId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }
}